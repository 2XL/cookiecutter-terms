{"version":3,"sources":["components/Terms.js","components/PdfRenderer.js","components/LiveEditor.js","App.js","serviceWorker.js","index.js"],"names":["TermsAndConditions","_ref","termsTxt","isRaw","react_default","a","createElement","Fragment","react_markdown_default","source","defaultProps","styles","StyleSheet","create","body","paddingTop","paddingBottom","paddingHorizontal","title","fontSize","textAlign","fontFamily","author","marginBottom","subtitle","margin","text","padding","image","marginVertical","marginHorizontal","emphasis","color","PDFViewerStyle","width","height","minHeight","PdfRenderer","children","console","log","react_pdf_browser_es","style","size","onRender","LiveEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","reloadOnChange","preview","handleChange","bind","assertThisInitialized","handleReloadToggle","event","setState","target","preventDefault","className","onSubmit","onChange","rows","type","onClick","handlePreviewReload","components_PdfRenderer","React","Component","App","onTabSelectEvent","_len2","arguments","length","Array","_key2","esm","onSelect","Terms","components_LiveEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b4180bd.chunk.js","sourcesContent":["import React from 'react';\n\nimport propTypes from 'prop-types'\n\nimport ReactMarkdown from 'react-markdown'\n\nconst TermsAndConditions = ({termsTxt, isRaw}) => {\n\n    return isRaw ?\n        <>\n            {termsTxt}\n        </>\n        :\n        <ReactMarkdown source={termsTxt}>\n\n        </ReactMarkdown>\n\n};\n\nTermsAndConditions.propTypes = {\n    termsTxt: propTypes.string,\n    isRaw: propTypes.bool,\n};\n\nTermsAndConditions.defaultProps = {\n    termsTxt: `\n\n\n## Generic Terms and Conditions template\n\nTerms and Conditions (\"Terms\")\n\nLast updated: 2019\n\nPlease read these Terms and Conditions (\"Terms\", \"Terms and Conditions\") carefully before using the https://example.com website and the My Mobile App Example App mobile application (the \"Service\") operated by My Company Company Name (\"us\", \"we\", or \"our\").\n\nYour access to and use of the Service is conditioned on your acceptance of and compliance with these Terms.\nThese Terms apply to all visitors, users and others who access or use the Service.\n\nBy accessing or using the Service you agree to be bound by these Terms.\nIf you disagree with any part of the terms then you may not access the Service.\n\n## Purchases\n\nIf you wish to purchase any product or service made available through the Service (\"Purchase\"), you may be asked to supply certain information relevant to your Purchase including, without limitation, your email, address, phone...\n\n## Subscriptions\n\nSome parts of the Service are billed on a subscription basis (\"Subscription(s)\"). You will be billed in advance on a recurring ...\n\n## Content\n\nOur Service allows you to post, link, store, share and otherwise make available certain information, text, graphics, videos, or other material (\"Content\").\nYou are responsible for the content distribution\n\n\n## Links To Other Web Sites\n\nOur Service may contain links to third-party web sites or services that are not owned or controlled by My Company Company Name.\nMy Company Company Name has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services.\nYou further acknowledge and agree that My Company Company Name shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such web sites or services.\n\n## Changes\n\nWe reserve the right, at our sole discretion, to modify or replace these Terms at any time.\nIf a revision is material we will try to provide at least 30 days' notice prior to any new terms taking effect.\nWhat constitutes a material change will be determined at our sole discretion.\n\n## Contact Us\n\nIf you have any questions about these Terms, please contact us. \n\nmailto:chenglong.zq@gmail.com`,\n    isRaw: false\n};\n\n\nexport default TermsAndConditions","import React from 'react';\n\nimport {Document, Page, Text, StyleSheet} from '@react-pdf/renderer';\n\nimport {PDFViewer} from '@react-pdf/renderer';\n\n\n// Font.register(\n//     'https://fonts.gstatic.com/s/oswald/v13/Y_TKV6o8WovbUd3m_X9aAA.ttf',\n//     {family: 'Oswald'},\n// );\n\n// Create styles\nconst styles = StyleSheet.create({\n    body: {\n        paddingTop: 35,\n        paddingBottom: 65,\n        paddingHorizontal: 35,\n    },\n    title: {\n        fontSize: 24,\n        textAlign: 'center',\n        fontFamily: 'Oswald'\n    },\n    author: {\n        fontSize: 12,\n        textAlign: 'center',\n        marginBottom: 40,\n    },\n    subtitle: {\n        fontSize: 18,\n        margin: 12,\n        fontFamily: 'Oswald'\n    },\n    text: {\n        padding: 10,\n        margin: 12,\n        fontSize: 14,\n        textAlign: 'justify',\n        fontFamily: 'Times-Roman'\n    },\n    image: {\n        marginVertical: 30,\n        marginHorizontal: 100,\n    },\n    emphasis: {\n        margin: 12,\n        fontSize: 24,\n        color: '#F22300',\n        fontFamily: 'Oswald'\n    }\n});\n\nconst PDFViewerStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"1800px\"\n};\n\n// Create Document Component\nconst PdfRenderer = ({children}) => {\n    console.log(children);\n\n    const onPdfRendered = () => {\n        console.log(\"rendered\")\n    };\n\n    return (\n        <PDFViewer style={PDFViewerStyle}>\n            <Document>\n                <Page size=\"A4\"\n                      onRender={onPdfRendered}\n                      style={styles.body}>\n                    <Text style={styles.text}>\n                        {children}\n                    </Text>\n\n                </Page>\n            </Document>\n        </PDFViewer>\n    )\n\n};\n\n\nexport default PdfRenderer;","// TODO: expose text area with the terms markdown, add preivew button, add download button\n\nimport React from 'react';\n\nimport PdfRenderer from './PdfRenderer'\n\n\nclass LiveEditor extends React.Component {\n\n    // children is the predefined terms\n    constructor(props) {\n        super(props);\n        console.log(this.props.children);\n        this.state = {\n            value: this.props.children.props.termsTxt,\n            reloadOnChange: false, // default dont reaload on change\n            preview: this.props.children.props.termsTxt\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleReloadToggle = this.handleReloadToggle.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n        if (this.state.reloadOnChange)\n            this.setState({preview: event.target.value});\n    }\n\n    handleReloadToggle(event) {\n        event.preventDefault();\n        this.setState({reloadOnChange: !this.state.reloadOnChange})\n    }\n\n    handlePreviewReload(event) {\n        event.preventDefault();\n        this.setState({preview: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"example\">\n                <div className=\"split left\">\n\n                    <form onSubmit={this.handleReloadToggle}>\n                        <span>Terms</span>\n                        <textarea className=\"textwrapper\" value={this.state.value} onChange={this.handleChange} rows={1000} />\n                        <input type=\"submit\" value=\"toggle Reload\"/>\n                        <input type=\"submit\" value=\"refresh Preview\" onClick={this.handlePreviewReload}/>\n                        <div><p>{this.state.reloadOnChange ? 'live edit: true' : 'live edit: false'}</p></div>\n                    </form>\n\n                </div>\n\n                <div className=\"split right\">\n                    <div className=\"preview\">\n                        <PdfRenderer>\n                            {this.state.preview}\n                        </PdfRenderer>\n                    </div>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\nexport default LiveEditor;\n\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport Terms from './components/Terms'\n\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\n\n// import PdfRenderer from './components/PdfRenderer'\nimport LiveEditor from './components/LiveEditor'\n\n\n\nclass App extends Component {\n\n    onTabSelectEvent = (...props) => {\n        console.log(props)\n    };\n    render() {\n        const TabsStyle = {\n            width: \"100%\",\n            height: \"100%\",\n            minHeight: '4000px'\n        };\n\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n\n\n\n                    <Tabs style={TabsStyle} onSelect={this.onTabSelectEvent}>\n                        <TabList>\n                            <Tab>Default view</Tab>\n                            {/*<Tab>Reader Pdf</Tab>*/}\n                            <Tab>Live Edit</Tab>\n                        </TabList>\n\n                        <TabPanel>\n                            <h4>\n                                Markdown Reader\n                            </h4>\n                            <div>\n                                <Terms isRaw={false}>\n\n                                </Terms>\n                            </div>\n                        </TabPanel>\n                        {/*<TabPanel>*/}\n                            {/*<h4>React-PDF Reader</h4>*/}\n                            {/*<div>*/}\n                                {/*<PdfRenderer>*/}\n                                    {/*<Terms isRaw={true}>*/}\n\n                                    {/*</Terms>*/}\n                                {/*</PdfRenderer>*/}\n                            {/*</div>*/}\n\n                        {/*</TabPanel>*/}\n                        <TabPanel>\n                            <h4>React-PDF Reader</h4>\n                            <div>\n                                <LiveEditor>\n                                    <Terms isRaw={true}>\n\n                                    </Terms>\n                                </LiveEditor>\n                            </div>\n                        </TabPanel>\n                    </Tabs>\n\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}